// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/dynamo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
	customerrors "post-register-handler/internal/custom-errors"
	models "post-register-handler/internal/models"
	reflect "reflect"
)

// MockDynamoServiceInterface is a mock of DynamoServiceInterface interface.
type MockDynamoServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoServiceInterfaceMockRecorder
}

// MockDynamoServiceInterfaceMockRecorder is the mock recorder for MockDynamoServiceInterface.
type MockDynamoServiceInterfaceMockRecorder struct {
	mock *MockDynamoServiceInterface
}

// NewMockDynamoServiceInterface creates a new mock instance.
func NewMockDynamoServiceInterface(ctrl *gomock.Controller) *MockDynamoServiceInterface {
	mock := &MockDynamoServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDynamoServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoServiceInterface) EXPECT() *MockDynamoServiceInterfaceMockRecorder {
	return m.recorder
}

// PutShortenedURLWithContext mocks base method.
func (m *MockDynamoServiceInterface) PutShortenedURLWithContext(ctx context.Context, shortenedURL models.ShortenedURL) (bool, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutShortenedURLWithContext", ctx, shortenedURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// PutShortenedURLWithContext indicates an expected call of PutShortenedURLWithContext.
func (mr *MockDynamoServiceInterfaceMockRecorder) PutShortenedURLWithContext(ctx, shortenedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutShortenedURLWithContext", reflect.TypeOf((*MockDynamoServiceInterface)(nil).PutShortenedURLWithContext), ctx, shortenedURL)
}

// MockDynamodbClientInterface is a mock of DynamodbClientInterface interface.
type MockDynamodbClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbClientInterfaceMockRecorder
}

// MockDynamodbClientInterfaceMockRecorder is the mock recorder for MockDynamodbClientInterface.
type MockDynamodbClientInterfaceMockRecorder struct {
	mock *MockDynamodbClientInterface
}

// NewMockDynamodbClientInterface creates a new mock instance.
func NewMockDynamodbClientInterface(ctrl *gomock.Controller) *MockDynamodbClientInterface {
	mock := &MockDynamodbClientInterface{ctrl: ctrl}
	mock.recorder = &MockDynamodbClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbClientInterface) EXPECT() *MockDynamodbClientInterfaceMockRecorder {
	return m.recorder
}

// PutItemWithContext mocks base method.
func (m *MockDynamodbClientInterface) PutItemWithContext(ctx context.Context, input *dynamodb.PutItemInput, opts ...request.Option) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItemWithContext indicates an expected call of PutItemWithContext.
func (mr *MockDynamodbClientInterfaceMockRecorder) PutItemWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemWithContext", reflect.TypeOf((*MockDynamodbClientInterface)(nil).PutItemWithContext), varargs...)
}
